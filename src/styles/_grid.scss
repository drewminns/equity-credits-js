$outer-margin: 3.5rem;
$gutter-width: 1rem;
$gutter-compensation: ($gutter-width * 0.5) * -1;
$half-gutter-width: $gutter-width * 0.5;
$columns: 12;

@function strip-unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

.wrap {
  max-width: 1456px;
}

.container_fluid,
.container {
  margin-right: auto;
  margin-left: auto;
}

.container_fluid {
  padding-right: $outer-margin;
  padding-left: $outer-margin;
}

.row {
  display: flex;
  flex: 0 1 auto;
  flex-direction: row;
  flex-wrap: wrap;
  margin-right: $gutter-compensation;
  margin-left: $gutter-compensation;
}

@mixin generateColumnWidths($className) {
  @for $i from 1 through $columns {
    .col_#{$className}_#{$i} {
      flex-basis: $i / $columns * 100%;
      max-width: $i / $columns * 100%;
      padding-right: $half-gutter-width;
      padding-left: $half-gutter-width;
    }
  }
}

@mixin generateOffset($className) {
  @for $i from 1 through $columns {
    .col_#{$className}_offset_#{$i} {
      margin-left: $i / $columns * 100%;
    }
  }
}

@mixin makeGrid($sizes...) {
  @each $classname, $width in keywords($sizes) {
    $minwidth: strip-unit($width);
    @if $width {
      @media screen and (min-width: #{$minwidth}px) {
        .container {
          width: #{$minwidth}px;
        }

        @include generateColumnWidths($classname);
        @include generateOffset($classname);
      }
    } @else {
      @include generateColumnWidths($classname);
      @include generateOffset($classname);
    }
  }
}

@include makeGrid($xs: null, $sm: $sm, $md: $md, $lg: $lg, $xl: $xl);
